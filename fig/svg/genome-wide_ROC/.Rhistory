biocLite("RnaSeqTutorial")
library("BiocInstaller", lib.loc="/usr/lib64/R/library")
biocLite("RnaSeqTutorial")
library("RnaSeqTutorial")
system.file(
"extdata",
package="RnaSeqTutorial")
install.packages("pasilla")
biocLite("pasilla")
detach("package:easyRNASeq", unload=TRUE)
detach("package:RnaSeqTutorial", unload=TRUE)
detach("package:easyRNASeq", unload=TRUE)
datafile = system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
datafile
pasillaCountTable = read.table( datafile, header=TRUE, row.names=1 )
pasillaCountTable
head(pasillaCountTable)
pasillaDesign = data.frame(
row.names = colnames( pasillaCountTable ),
condition = c( "untreated", "untreated", "untreated",
"untreated", "treated", "treated", "treated" ),
libType = c( "single-end", "single-end", "paired-end",
"paired-end", "single-end", "paired-end", "paired-end" ) )
pasillaDesign
pairedSamples = pasillaDesign$libType == "paired-end"
countTable = pasillaCountTable[ , pairedSamples ]
condition = pasillaDesign$condition[ pairedSamples ]
library("DESeq")
cds = newCountDataSet( countTable, condition )
cds = estimateSizeFactors( cds )
cds
sizeFactors( cds )
head( counts( cds, normalized=TRUE ) )
read.csv('tmp_raw.csv')
d=read.csv('tmp_raw.csv')
head(d)
d=read.csv('tmp_raw.csv', header=false)
d=read.csv('tmp_raw.csv', header=F)
d
head(d)
condition = factor( c( "untreated", "untreated", "treated", "treated" ) )
cds = newCountDataSet( countTable, condition )
cds = newCountDataSet( d, condition )
head(countTable)
d
d=read.csv('tmp_raw.csv', header=F, row.names = 1)
d
head(d)
cds = newCountDataSet( d, condition )
cds
cds = estimateSizeFactors( cds )
sizeFactors( cds )
head( counts( cds, normalized=TRUE ) )
condition
cds = estimateDispersions( cds )
plotDispEsts( cds )
head( fData(cds) )
res = nbinomTest( cds, "untreated", "treated" )
head(res)
plotMA(res)
res$pval
hist(res$pval)
res$pval<0.1
res$pval[res$pval<0.1]
plotMA(res)
hist(res$pval, breaks=100, col="skyblue", border="slateblue", main="")
head( resSig[ order( resSig$foldChange, -resSig$baseMean ), ] )
resSig = res[ res$padj < 0.1, ]
head( resSig[ order( resSig$foldChange, -resSig$baseMean ), ] )
resSig[ order( resSig$foldChange, -resSig$baseMean ), ] )
resSig[ order( resSig$foldChange, -resSig$baseMean ), ]
cds = newCountDataSet( d, condition )
d
condition
desing = data.frame(condition=condition, libType=rep("paired-end",4))
desing
colnames(desing)
colnames(desing) = colnames(d)
colnames(d)
rownames(desing) = colnames(d)
desing
cds = newCountDataSet( d, condition )
cds
cds = estimateSizeFactors( cds )
cds = estimateDispersions( cds )
sizeFactors( cds )
plotDispEsts( cds )
library("edgeR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
d
condition
y = DGEList(counts = d, group = condition)
y <- calcNormFactors(y)
y <- estimateCommonDisp(y)
y <- estimateTagwiseDisp(y)
et <- exactTest(y)
et
et$table
et$table$PValue
hist(et$table$PValue)
et$table$logFC
design <- model.matrix(~group)
design <- model.matrix(~condition)
design
condition
et$table$logFC[et$table$PValue<0.1]
de<- decideTestsDGE(et)
de
de[,1]
y
fit <- glmFit(y,design)
fit
lrt.2vs1 <- glmLRT(fit,coef=2)
topTags(lrt.2vs1)
y
y <- DGEList(counts=x,group=group)
y <- DGEList(counts=d,group=condition)
y
y <- estimateGLMCommonDisp(y,design)
y <- estimateGLMTrendedDisp(y,design)
y <- estimateGLMTagwiseDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
lrt
topTags(lrt)
decideTestsDGE(lrt)
decideTestsDGE(lrt)[,1]
help(decideTestsDGE)
decideTestsDGE(lrt, p.value = 0.1)[,1]
decideTestsDGE(lrt, p.value = 0.2)[,1]
decideTestsDGE(lrt, p.value = 0.1)[,1]
rownames(d)[decideTestsDGE(lrt, p.value = 0.1)[,1]]
rownames(d)[decideTestsDGE(lrt, p.value = 0.1)[,1]<0]
rownames(d)[decideTestsDGE(lrt, p.value = 0.05)[,1]<0]
rownames(d)[decideTestsDGE(lrt, p.value = 0.1)[,1]<0]
install.packages("RSSL")
install.packages(c("data.table", "htmlTable", "roxygen2"))
help(setwd)
installed.packages()
r = installed.packages()
install.packages("Rcpp")
require(Rcpp)
require(Hola)
a = require(Hola)
source('~/Drive/CONICET/Workspace/miRNAss-experiments/results/genome-wide ROC.R')
setwd("~/Drive/CONICET/Workspace/miRNAss-experiments/results")
source('~/Drive/CONICET/Workspace/miRNAss-experiments/results/genome-wide ROC.R')
title("Anopheles Gambiae F1")
svg("aga-norep-gudys.eps", width = 4, height = 4)
plot(perf, avg = 'threshold', downsampling = 0.1, colorize = T)
dev.off()
svg("aga-norep-gudys.eps", width = 4, height = 4)
plot(perf, avg = 'threshold', downsampling = 0.05, colorize = T)
dev.off()
svg("aga-norep-gudys.svg", width = 4, height = 4)
plot(perf, avg = 'threshold', downsampling = 0.05, colorize = T)
dev.off()
svg("aga-norep-gudys.svg", width = 8, height = 8)
plot(perf, avg = 'threshold', downsampling = 0.05, colorize = T)
dev.off()
svg("aga-norep-gudys.svg", width = 5, height = 5)
plot(perf, avg = 'threshold', downsampling = 0.05, colorize = T)
dev.off()
setwd("~/Drive/CONICET/Workspace/miRNAss-experiments/results/genome-wide_ROC")
list.files(pattern = ".rda")
f = list.files(pattern = ".rda")[1]
f
f[1:5]
f[[1:5]]
f(1)
f{1}
substr(f,1, -3)
substr(f,1, 5)
substr(f,1, length(f)-3)
strwidth(f)
substr(f,1, nchar(f)-3)
substr(f,1, nchar(f)-4)
source('~/Drive/CONICET/Workspace/miRNAss-experiments/results/genome-wide_ROC/genome-wide ROC.R')
percentages = {}
for (per in c(0.02, 0.1, 0.2))
percentages = c(percentages, rep(per, ceiling(2/per)))
length(percentages)
130/10
percentages = {}
for (per in c(0.02, 0.08, 0.14, 0.2))
percentages = c(percentages, rep(per, ceiling(2/per)))
length(percentages)
150/10
10*15
150/50
results = data.frame()
iper=3
per = percentages[iper]
per
150*5
